For a LIFO or stack, data is read in the opposite order of the writes.  Reading is also "destructive," meaning once it is read, the entry no longer exists in the data structure.

For example:
	Operation		---------- 		Contents (oldest on the right, newest on the left)
	1) Write "A"  	----------   	A
	2) Write "B"  	----------		BA
	3) Write "C"  	----------		CBA
	4) Write "D"  	----------		DCBA
	5) Read 		----------		CBA  	(D is read and destroyed)
	6) Read 		----------		BA   	(C is read and destroyed)
	7) Write "E" 	----------		EBA		
	8) Read 		---------- 		BA 		(E is read and destroyed)


So to develop the algorithm:

Reading (called popping for LIFO):
	- If the LIFO/stack is empty
		- Do nothing.
	- Else
		- Read newest value (considered the top in stack terminology)

Writing (called pushing for LIFO):
	- If the LIFO is empty
		- The new entry is the oldest and newest simultaneously
	- If the LIFO has a size limit and is full
		- No room, deny writing
	- If LIFO has entries but is not full
		- New entry is written to the "new" side
