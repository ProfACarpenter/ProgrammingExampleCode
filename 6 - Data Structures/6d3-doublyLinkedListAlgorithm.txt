For linked lists, there is no defined order as a whole (although you could put them in order, e.g. numerical, alphabetical).  

In a doubly-linked list, each node/entry in the list points to the next one until there are none left. At the same time, each node also points to the previous node. For the sake of demonstrations, we will explore the functions using a numerically sorted list of books with library IDs (see below);

// using the class book_c from previous examples
class book_c{
		protected:
			book_c *next; // will point to the next one
			book_c *previous; // now we have a pointer to the previous node also
			std::string section; 
			std::string author;
			std::string title;
			int libraryBarCode;
			bool checkedOut;
		private:
			// all get/set/constructors/destructors/print
		}
};

// We need a head pointer that points to the top/front of the list
book_c *Head; 
// The tail will point to the last element or back of the list
book_c *Tail; 

-------------------------- Algorithms --------------------------
a *- means it is new to the doubly linked list as compared to the singly linked

- Print Head to Tail (same as singly-linked list):
	- create a temporary pointer to point to the first element
	- inside a loop:
		- print that element's variables (locally or through the class print function)
		- move pointer to the next element 
		- if there is no element, exit the function

*- Print Tail to Head:
	- create a temporary pointer to point to the last element (Tail)
	- inside a loop:
		- print that element's variables (locally or through the class print function)
		- move pointer to the previous element 
		- if there is no previous element, exit the function


- Search (for matching author/title/section/barcode/etc.; each would need its own comparison):
	- create a temporary pointer to point to the first element
	- inside a loop:
		- compare some input (e.g. user) to the element's variable
		- if it matches:
			- print that element's variables (locally or through the class print function)
			- exit the function (unless you can have more than match in the list, in which case, continue)
		- move pointer to the next element 
		- if there is no element, exit the function
	- if the loop completes and no match is found, warn/tell the user/program no match was found

*- Search backwards:
	- create a temporary pointer to point to the last element
	- inside a loop:
		- compare some input (e.g. user) to the element's variable
		- if it matches:
			- print that element's variables (locally or through the class print function)
			- exit the function (unless you can have more than match in the list, in which case, continue)
		- move pointer to the previous element 
		- if there is no element, exit the function
	- if the loop completes and no match is found, warn/tell the user/program no match was found

- Delete everything (same as singly-linked list):
	- create a temporary pointer that points to the head (first element)
	- create a pointer that points to the second element
	- while the first element is still non-zero:
		- delete first element
		- move first element to point to the same place as the second
		- if there is an element after second
			- move second to the next element

- Add a new entry (this will be in numerical order by the libraryBarCode, but could also be done in any order with any variable):
	- make a new entry (using new) and save the pointer to a temporary place (newEntry)
	- fill newEntry's data/variables

	- If the list is empty (Head == NULL)
		- set Head equal to the new entry
		- set newEntry's next to NULL
		*- set Tail equal to the new entry
		*- set newEntry's previous to NULL

	- else if the input code goes before the first element (userInput < Head->libraryBarCode)
		- set the newEntry's next pointer to the current Head
		- set newEntry's previous pointer to 0/NULL
		- set Head to the newEntry
		- no changes to tail

	- else (it is in the middle or at the end)
		- create a loop; set a temporary pointer to the first element (temp = HEAD)
			- if the user input fits goes before the next element (we know it doesn't go before, since we would have checked already to get to this point)
				- newEntry's next should be equal to temp's next 
				*- temp->next's previous should be set to newEntry
				*- newEntry's previous pointer should be temp 
				- reset temp's next to be the newEntry
				- exit the function so you don't add more than once
			- move temp to the next (temp = temp->next) 
			- repeat while temp isn't 0/NULL

- Remove an existing entry (comparing for matching author/title/section/barcode/etc.; each would need its own comparison):

	- if the list is empty, do nothing
	- else if the comparison of the input matches the Head node's variable
		- create a temporary pointer to point to the first element
		- Set Head to 2nd element (Head = Head->next)
		*- Set new Head's previous pointer to NULL/0
		- delete the temporary pointer
		(if you only have one match possible, exit; otherwise, you can keep going)
	*- else if the comparison of the input matches the Tail node's variable
		- create a temporary pointer to point to the last element
		- Set Tail to 2nd-to-last element (Tail = Tail->next)
		*- Set new Tail's next pointer to NULL/0
		- delete the temporary pointer

	- inside a loop, create a temporary pointer to point to the first element (head):
		*- compare the user input to the element's variable
		- if the user input matches temp's variables
			- reset the previous node's next pointer to the current node's next
			- reset the next node's previous pointer to the current node's prev
			- delete the temp
			- exit the function
		- move pointer to the next element 
		- if there is no element, exit the function
	- if the loop completes and no match is found, warn/tell the user/program no match was found






